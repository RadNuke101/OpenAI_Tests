# Start time: 2024-04-09 19:07:11.516625

'''
Prompt:
The prompt describes the relationship between the inputs and outputs. Given that the prompt is: ### Input Column Summary:

The input column consists of full names of individuals, each entry formatted as a single string. These names appear to follow a conventional Western naming pattern, where each entry is composed of a first name followed by a last name, separated by a space. The dataset includes a variety of names, suggesting a diverse set of origins or backgrounds. Each entry is unique, indicating that the data might represent a sample of individuals from a broader population. The names are presented in a standard format, with capitalization used for the first letter of each name, which is typical in English and many other languages for proper nouns.

### Output Column Summary:

The output column contains the last names extracted from the full names provided in the input column. Each output is a single word, presumably representing the family name or surname part of the full name from the input. The extraction process seems to consistently remove the first name and any potential middle names, leaving only the last name. Like the input, the output names are capitalized, maintaining the proper noun format. This column simplifies the data from the input by focusing solely on the surname component, which could be useful for tasks that require identification or categorization based on family names.

### Relationship Between Input and Output:

The relationship between the input and output columns is a straightforward extraction process where the output is derived directly from the input. Specifically, the output is generated by isolating and retaining the last name from the full names provided in the input. This process involves identifying the space that separates the first name from the last name and then selecting the portion of the string that follows. The transformation from input to output simplifies the data by focusing on the surname, which could serve various purposes such as sorting, grouping, or analyzing the data based on family names. This method assumes a consistent naming convention where the last name follows the first name, which is common in many cultures but not universal. The process highlights the importance of understanding naming conventions when manipulating and analyzing personal name data., and input as ['Nancy FreeHafer'] output is FreeHafer, input as ['Andrew Cencici'] output is Cencici, input as ['Jan Kotas'] output is Kotas, input as ['Mariya Sergienko'] output is Sergienko, , generate a python function that matches the given input and output above, treating the input and output as strings, not lists. If the input has multiple list elements, that means there are separate inputs that should be passed as separate arguments to the python function. Include the above input in test cases. Do not include the output of the test code in the python program. The generated python code should have only executable statements and comments. The function should return the output, not print it. Do not include assert statements. Name the generated python function as generated_function. Make sure to generate a python function as defined above.
'''

def generated_function(full_name):
    """
    Extracts and returns the last name from a given full name.
    
    Parameters:
    full_name (str): A string containing a first name and a last name separated by a space.
    
    Returns:
    str: The last name extracted from the full name.
    """
    # Split the full name into parts using space as a separator
    name_parts = full_name.split(' ')
    # The last name is assumed to be the last element in the list
    last_name = name_parts[-1]
    return last_name

# Test cases
print(generated_function('Nancy FreeHafer'))  # Expected output: FreeHafer
print(generated_function('Andrew Cencici'))   # Expected output: Cencici
print(generated_function('Jan Kotas'))        # Expected output: Kotas
print(generated_function('Mariya Sergienko')) # Expected output: Sergienko
print(generated_function("Nancy FreeHafer"))  ## Output: FreeHafer
print(generated_function("Andrew Cencici"))  ## Output: Cencici
print(generated_function("Jan Kotas"))  ## Output: Kotas
print(generated_function("Mariya Sergienko"))  ## Output: Sergienko

# End time: 2024-04-09 19:07:24.996589
# Elapsed time in seconds: 13.479689845000394


# APPEND TEST SCRIPTS...
print(generated_function("Nancy FreeHafer"))  ## Output: FreeHafer
print(generated_function("Andrew Cencici"))  ## Output: Cencici
print(generated_function("Jan Kotas"))  ## Output: Kotas
print(generated_function("Mariya Sergienko"))  ## Output: Sergienko


print(generated_function("Benjamin Hayes"))  ### Output: Hayes
print(generated_function("Liam Carter"))  ### Output: Carter
print(generated_function("Mason Thompson"))  ### Output: Thompson
print(generated_function("Sophia Coleman"))  ### Output: Coleman
print(generated_function("Ava Bennett"))  ### Output: Bennett
print(generated_function("Chloe Adams"))  ### Output: Adams
print(generated_function("Owen Morgan"))  ### Output: Morgan
print(generated_function("Wyatt Davis"))  ### Output: Davis
print(generated_function("Samuel Wright"))  ### Output: Wright
print(generated_function("Gabriel Hayes"))  ### Output: Hayes
print(generated_function("Grace Harrison"))  ### Output: Harrison
print(generated_function("Olivia Parker"))  ### Output: Parker
print(generated_function("Madison Foster"))  ### Output: Foster
print(generated_function("Nolan Cooper"))  ### Output: Cooper
print(generated_function("Caleb Johnson"))  ### Output: Johnson
print(generated_function("Lily Anderson"))  ### Output: Anderson
print(generated_function("Emma Reynolds"))  ### Output: Reynolds
print(generated_function("Caleb Mitchell"))  ### Output: Mitchell
print(generated_function("Scarlett Walker"))  ### Output: Walker
print(generated_function("Elijah Foster"))  ### Output: Foster
print(generated_function("Abigail Cooper"))  ### Output: Cooper
print(generated_function("Zoey Turner"))  ### Output: Turner
print(generated_function("Logan Smith"))  ### Output: Smith
print(generated_function("Isabella Brooks"))  ### Output: Brooks
print(generated_function("Hannah Martin"))  ### Output: Martin
print(generated_function("Aiden Clark"))  ### Output: Clark
print(generated_function("Jackson Turner"))  ### Output: Turner
print(generated_function("Carter Edwards"))  ### Output: Edwards
print(generated_function("Harper Taylor"))  ### Output: Taylor
print(generated_function("Amelia Nelson"))  ### Output: Nelson

# TEST SCRIPTS APPENDED!

