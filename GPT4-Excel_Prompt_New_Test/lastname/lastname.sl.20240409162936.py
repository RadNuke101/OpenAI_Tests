# Start time: 2024-04-09 17:25:58.792642

'''
Prompt:
The prompt describes the relationship between the inputs and outputs. Given that the prompt is: ### Input Column Summary:

The input data consists of a single column containing full names of individuals. Each entry in this column is a string that combines both the first name and the last name of a person, separated by a space. The names appear to be of diverse origins, indicating a variety of cultural backgrounds. The first names vary widely, including Nancy, Andrew, Jan, and Mariya, suggesting a mix of genders and possibly ethnicities. The last names, such as FreeHafer, Cencici, Kotas, and Sergienko, also indicate a diversity in origins, ranging from potentially Western to Eastern European ancestries. The input data is qualitative, focusing on the textual representation of personal names.

### Output Column Summary:

The output data, derived from the input column, consists solely of the last names of the individuals. It is a qualitative dataset that retains the diversity observed in the input column but focuses exclusively on the family names. This simplification strips away the first names, leaving only the last names like FreeHafer, Cencici, Kotas, and Sergienko. The output maintains the variety in origins and the potential cultural implications of the names, but it reduces the personal information to a single identifying component: the surname.

### Relationship Between Input and Output:

The relationship between the input and output data is a process of extraction and simplification. The output is generated by isolating and retaining the last name from each full name provided in the input. This process involves identifying the space that separates the first name from the last name in each entry and then extracting the substring that follows this space, which is assumed to be the last name. The transformation from input to output effectively narrows the focus from the full identity of an individual, represented by both their first and last names, to a more generic identifier, their family name. This simplification could serve purposes where the specific identity of an individual is less important than their familial or group affiliation, as represented by their last name. The method assumes a consistent naming convention where the last name follows the first name, which may not hold in all cultural contexts but works under the assumption provided by the data examples., and input as ['Nancy FreeHafer'] output is FreeHafer, input as ['Andrew Cencici'] output is Cencici, input as ['Jan Kotas'] output is Kotas, input as ['Mariya Sergienko'] output is Sergienko, , generate a python function that matches the given input and output above, treating the input and output as strings, not lists. If the input has multiple list elements, that means there are separate inputs that should be passed as separate arguments to the python function. Include the above input in test cases. Do not include the output of the test code in the python program. The generated python code should have only executable statements and comments. The function should return the output, not print it. Do not include assert statements. Name the generated python function as generated_function. Make sure to generate a python function as defined above.
'''

def generated_function(full_name):
    """
    Extracts and returns the last name from a full name string.
    
    Parameters:
    full_name (str): A string containing the first name and the last name separated by a space.
    
    Returns:
    str: The last name extracted from the full name.
    """
    # Split the full name into parts assuming the last name is after the first space
    parts = full_name.split(" ")
    # Return the last element from the split parts which is assumed to be the last name
    return parts[-1]

# Test cases
print(generated_function('Nancy FreeHafer'))  # Expected output: FreeHafer
print(generated_function('Andrew Cencici'))   # Expected output: Cencici
print(generated_function('Jan Kotas'))        # Expected output: Kotas
print(generated_function('Mariya Sergienko')) # Expected output: Sergienko
print(generated_function("Nancy FreeHafer"))  ## Output: FreeHafer
print(generated_function("Andrew Cencici"))  ## Output: Cencici
print(generated_function("Jan Kotas"))  ## Output: Kotas
print(generated_function("Mariya Sergienko"))  ## Output: Sergienko

# End time: 2024-04-09 17:26:05.043531
# Elapsed time in seconds: 6.250705013997504


# APPEND TEST SCRIPTS...
print(generated_function("Nancy FreeHafer"))  ## Output: FreeHafer
print(generated_function("Andrew Cencici"))  ## Output: Cencici
print(generated_function("Jan Kotas"))  ## Output: Kotas
print(generated_function("Mariya Sergienko"))  ## Output: Sergienko


print(generated_function("Benjamin Hayes"))  ### Output: Hayes
print(generated_function("Liam Carter"))  ### Output: Carter
print(generated_function("Mason Thompson"))  ### Output: Thompson
print(generated_function("Sophia Coleman"))  ### Output: Coleman
print(generated_function("Ava Bennett"))  ### Output: Bennett
print(generated_function("Chloe Adams"))  ### Output: Adams
print(generated_function("Owen Morgan"))  ### Output: Morgan
print(generated_function("Wyatt Davis"))  ### Output: Davis
print(generated_function("Samuel Wright"))  ### Output: Wright
print(generated_function("Gabriel Hayes"))  ### Output: Hayes
print(generated_function("Grace Harrison"))  ### Output: Harrison
print(generated_function("Olivia Parker"))  ### Output: Parker
print(generated_function("Madison Foster"))  ### Output: Foster
print(generated_function("Nolan Cooper"))  ### Output: Cooper
print(generated_function("Caleb Johnson"))  ### Output: Johnson
print(generated_function("Lily Anderson"))  ### Output: Anderson
print(generated_function("Emma Reynolds"))  ### Output: Reynolds
print(generated_function("Caleb Mitchell"))  ### Output: Mitchell
print(generated_function("Scarlett Walker"))  ### Output: Walker
print(generated_function("Elijah Foster"))  ### Output: Foster
print(generated_function("Abigail Cooper"))  ### Output: Cooper
print(generated_function("Zoey Turner"))  ### Output: Turner
print(generated_function("Logan Smith"))  ### Output: Smith
print(generated_function("Isabella Brooks"))  ### Output: Brooks
print(generated_function("Hannah Martin"))  ### Output: Martin
print(generated_function("Aiden Clark"))  ### Output: Clark
print(generated_function("Jackson Turner"))  ### Output: Turner
print(generated_function("Carter Edwards"))  ### Output: Edwards
print(generated_function("Harper Taylor"))  ### Output: Taylor
print(generated_function("Amelia Nelson"))  ### Output: Nelson

# TEST SCRIPTS APPENDED!

